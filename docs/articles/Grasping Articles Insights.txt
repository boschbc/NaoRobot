Grasping Articles Summary and Insights

Nao's Grasping Limits:
 - The Nao's fingers cannot be controlled independently as they are driven by a single motor.
 - The Nao's fingers' surface is quite smooth, this makes picking smooth objects extremely hard if not impossible.
 - The Nao excels at picking light, small, rough objects.
 
Grasping Points:
 - Objects which are not absolutely symmetric require grasping points to be identified.
 - Soft fingers grasping is harder to control than hard fingers.
 - Grasping with soft fingers is however is more effective (chance of objects slipping is smaller than with hard fingers).
 - There are usually multiple ways to position the robot in the grasping-stance. The correct way is the which:
	 * Uses the least amount of motor-movements.
	 * Does not collide with the object.
	 * Does not take too long.
 - Selecting a grasping-stance can be done using training: 
	* Differentiate different types of objects
	* Train on each one in a testing environment and see which stance works best per type.
	* Categorize target object (in real time) into one of the types.
	* Use the optimal way found during training to grasp target object.

Identifying object properties:
 - Do not rely on color.
 - Rely on object edges.
 - If possible, train the robot with a given object from multiple angles.
 - High image quality is a plus.
 - Most important properties:
	* Location (three possible coordinate systems:)
		# Torso-Space - Origin at Nao's torso & Z-axis extending upwards.
		# Nao-space - Origin between Nao's legs.
		# World-space - Origin at the position between Nao's legs at start-up.
	* Dimension

Grabbing:
 - Grab range is ~16.5cm
 - Decide which way to grab - choose one of the ways in the search-space (=all possible ways):
	* Not using all motors means smaller search-space (better! - but at what cost?)
	* Mirroring the movements of one hand with the second cuts the search-space in half.
		# Downside is that objects have to be centered in front of the Nao.
 - Achieving best grag:
	* Method 1 - machine learning
		# Train
		# Test
		# Have a function generate next way to be trained/tested.
		# Repeat until satisfied.

Things we need to know before proceeding to implementation:
 - Do objects have predefined shape(s)?
 - Where will objects be located? (on the floor? another surface?)
 - Do objects have fixed dimensions?
 - Are objects known or unknown?
 - Do objects have predefined color(s)?
 - Possible object locations?
